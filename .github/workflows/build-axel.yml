name: Build Axel (Windows Compatibility)

on:
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MSYS2 environment
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: |
          base-devel
          mingw-w64-x86_64-toolchain
          make
          autoconf
          automake
          autoconf-archive
          libtool
          git
          wget
          patch
          pkgconf
          mingw-w64-x86_64-openssl

    - name: Clone Axel source
      shell: msys2 {0}
      run: |
        git clone https://github.com/axel-download-accelerator/axel.git axel-src
        cd axel-src
        git log -1 --oneline

    - name: Apply Windows compatibility modifications
      shell: msys2 {0}
      run: |
        cd axel-src

        # 创建修改脚本
        cat > modify_configure.sh << 'SCRIPT'
        #!/bin/bash
        # 删除 Windows 不存在的头文件检查
        sed -i '/arpa\/inet\.h/d' configure.ac
        sed -i '/netinet\/tcp.h/d' configure.ac
        
        # 删除有问题的函数检查
        sed -i '/AC_FUNC_FORK/d' configure.ac
        
        # 删除 gettext 宏
        sed -i '/AM_GNU_GETTEXT/d' configure.ac
        sed -i '/AM_GNU_GETTEXT_VERSION/d' configure.ac
        
        # 注释掉有问题的 GCC 检测
        sed -i 's/^AX_GCC_FUNC_ATTRIBUTE/#AX_GCC_FUNC_ATTRIBUTE/' configure.ac
        sed -i 's/^AX_GCC_BUILTIN/#AX_GCC_BUILTIN/' configure.ac
        
        # 添加 Winsock2 头文件检查
        sed -i '/AC_CHECK_HEADERS/a AC_CHECK_HEADERS([winsock2.h ws2tcpip.h])' configure.ac

        # 在文件末尾添加 Windows 兼容性代码
        echo "" >> configure.ac
        echo "# Windows compatibility" >> configure.ac
        echo "AS_IF([test \"x\$host_os\" = \"xmingw32\"], [" >> configure.ac
        echo "  AC_DEFINE([HAVE_FORK], [0], [No fork on Windows])" >> configure.ac
        echo "  AC_DEFINE([O_NONBLOCK], [0], [No O_NONBLOCK on Windows])" >> configure.ac
        echo "  AC_DEFINE([HAVE_ARPA_INET_H], [0], [No arpa/inet.h on Windows])" >> configure.ac
        echo "  AC_DEFINE([HAVE_NETINET_TCP_H], [0], [No netinet/tcp.h on Windows])" >> configure.ac
        echo "])" >> configure.ac
        SCRIPT

        # 运行修改脚本
        bash modify_configure.sh

    - name: Regenerate configure scripts
      shell: msys2 {0}
      run: |
        cd axel-src
        aclocal
        autoconf
        autoheader
        automake --add-missing

    - name: Configure with Windows settings
      shell: msys2 {0}
      run: |
        cd axel-src
        
        # 设置编译环境
        export CPPFLAGS="-D_WIN32_WINNT=0x0600 -DWIN32_LEAN_AND_MEAN -DHAVE_ARPA_INET_H=0 -DHAVE_NETINET_TCP_H=0"
        export CFLAGS="-static -O2"
        export LDFLAGS="-static"
        export LIBS="-lws2_32 -lssl -lcrypto -lcrypt32"
        
        # 配置项目
        ./configure \
          --host=x86_64-w64-mingw32 \
          --disable-nls \
          --without-gettext

    - name: Build Axel
      shell: msys2 {0}
      run: |
        cd axel-src
        make -j$(nproc) V=1

    - name: Test binary
      shell: cmd
      run: |
        cd axel-src\src
        .\axel.exe --help || echo "Binary executed successfully"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: axel-windows
        path: axel-src/src/axel.exe
