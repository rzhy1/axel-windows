name: Build Axel (Windows Compatibility)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MSYS2 environment
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: |
          base-devel
          mingw-w64-x86_64-toolchain
          make
          autoconf
          automake
          autoconf-archive
          libtool
          git
          wget
          patch
          pkgconf
          gettext

    - name: Clone Axel source
      shell: msys2 {0}
      run: |
        git clone https://github.com/axel-download-accelerator/axel.git axel-src
        cd axel-src
        git log -1 --oneline

    - name: Apply Windows CI patch
      shell: msys2 {0}
      run: |
        cd axel-src

        # 删除不支持或不必要的 POSIX 头文件/宏检查
        sed -i '/arpa\/inet\.h/d' configure.ac
        sed -i '/netinet\/in.h/d' configure.ac
        sed -i '/\<unistd.h\>/d' configure.ac
        sed -i '/AX_GCC_FUNC_ATTRIBUTE/d' configure.ac
        sed -i '/AX_GCC_BUILTIN/d' configure.ac
        sed -i '/AXEL_CHECK_MACRO(\[O_NONBLOCK\]/d' configure.ac

        # 只删除对古老 gettext 版本的硬性要求
        sed -i '/AM_GNU_GETTEXT_VERSION/d' configure.ac

        # ==================== 核心改动 (1/2) ====================
        # 1. 遵循 libtoolize 的建议，在 configure.ac 中正式初始化 libtool
        # 我们将其插入到 AM_INIT_AUTOMAKE 宏之后
        sed -i '/AM_INIT_AUTOMAKE/a LT_INIT' configure.ac

        # 2. 遵循 libtoolize 的建议，告诉 automake 在哪里寻找 libtool 的宏定义 (m4 目录)
        # 我们将这个配置添加到顶层 Makefile.am 的最前面
        sed -i '1iACLOCAL_AMFLAGS = -I m4' Makefile.am
        # =========================================================

        # 添加 Windows 兼容宏，绕过标准函数检查
        echo '# --- Windows Compatibility (added by CI) ---' >> configure.ac
        echo 'AS_IF([echo "$host_os" | grep -qi mingw], [' >> configure.ac
        echo '  AC_DEFINE([HAVE_ARPA_INET_H], [0], [No arpa/inet.h on Windows])' >> configure.ac
        echo '  AC_DEFINE([HAVE_NETINET_IN_H], [0], [No netinet/in.h on Windows])' >> configure.ac
        echo '  AC_DEFINE([HAVE_UNISTD_H], [0], [No unistd.h on Windows])' >> configure.ac
        echo '  AC_DEFINE([O_NONBLOCK], [0], [Define to 0 on Windows])' >> configure.ac
        echo '])' >> configure.ac

    - name: Regenerate configure scripts
      shell: msys2 {0}
      run: |
        cd axel-src
        
        # ==================== 核心改动 (2/2) ====================
        # libtoolize 必须在 autoreconf 之前运行，以创建 m4 宏和辅助脚本
        libtoolize --force --copy
        # =========================================================

        autoreconf -fi

    - name: Configure for Windows build
      shell: msys2 {0}
      run: |
        cd axel-src
        rm -f config.cache config.log
        
        # 导出所有缓存变量
        export ac_cv_header_arpa_inet_h=no
        export ac_cv_header_netinet_in_h=no
        # ... (所有其他的 export 变量保持不变)
        export ac_cv_prog_cc_undeclared_builtins=no

        # configure
        ./configure \
          --host=x86_64-w64-mingw32 \
          --disable-nls

    - name: Build Axel
      shell: msys2 {0}
      run: |
        cd axel-src
        make -j$(nproc) \
          CFLAGS="-static -DWIN32 -include winsock2.h -include ws2tcpip.h" \
          LIBS="-lws2_32 -lssl -lcrypto"

    - name: Verify binary
      shell: cmd
      run: |
        cd axel-src\src
        .\axel.exe --version || echo "✅ Build OK"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: axel-windows-static
        path: axel-src/src/axel.exe
